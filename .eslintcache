[{"/home/raghav/flickr-clone/src/index.js":"1","/home/raghav/flickr-clone/src/App.js":"2","/home/raghav/flickr-clone/src/searchComponent.js":"3","/home/raghav/flickr-clone/src/services/api.js":"4","/home/raghav/flickr-clone/src/gallery.js":"5"},{"size":818,"mtime":1607259234339,"results":"6","hashOfConfig":"7"},{"size":2819,"mtime":1607258820121,"results":"8","hashOfConfig":"7"},{"size":3627,"mtime":1607193474241,"results":"9","hashOfConfig":"7"},{"size":1613,"mtime":1607277327821,"results":"10","hashOfConfig":"7"},{"size":2146,"mtime":1607281437123,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"qlt0b7",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/raghav/flickr-clone/src/index.js",[],["24","25"],"/home/raghav/flickr-clone/src/App.js",["26"],"import \"./App.css\";\n\nimport React, { Component } from \"react\";\nimport SearchComponent from \"./searchComponent\";\nimport {\n  Avatar,\n  Box,\n  Center,\n  Container,\n  Flex,\n  Heading,\n  Icon,\n  Text,\n  Wrap,\n  WrapItem,\n} from \"@chakra-ui/react\";\nimport { getGroups } from \"./services/api\";\nimport { BsPeopleFill, BsImages, BsFillChatDotsFill } from \"react-icons/bs\";\nimport { Link } from \"react-router-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      userInput: \"\",\n      groups: [],\n    };\n  }\n\n  fetchGroups = async (str) => {\n    const response = await getGroups(str);\n    this.setState({ userInput: str, groups: response.data.groups.group });\n  };\n\n  render() {\n    return (\n      <>\n        <Container maxW=\"xl\" py={5}>\n          <SearchComponent\n            options={this.state.options}\n            updateSearchInput={(userInput) => this.fetchGroups(userInput)}\n          />\n        </Container>\n        <Container maxW=\"70%\" bg=\"#f3f5f6\">\n          <Heading p={2}>Flickr Groups</Heading>\n          <Wrap spacing=\"20px\" justify=\"center\">\n            {this.state.groups.map((group) => (\n              <WrapItem w=\"45%\">\n                <Link\n                  to={{\n                    pathname: `/gallery/${group.name}`,\n                    state: {\n                      groupId: group.nsid,\n                    },\n                  }}\n                  key={group.nsid}\n                >\n                  <Box bg=\"white\" w=\"100%\">\n                    <Flex p={4}>\n                      <Avatar\n                        size=\"xl\"\n                        p={2}\n                        bg=\"none\"\n                        border=\"1px\"\n                        borderColor=\"lightgrey\"\n                        borderStyle=\"double\"\n                        src={group.iconurls.large}\n                      />\n                      <Box p={4}>\n                        <Text>{group.name}</Text>\n                        <Flex align=\"center\" justify=\"space-between\">\n                          <Box px={2}>\n                            <Icon mr={1} as={BsPeopleFill} />\n                            {group.members}\n                          </Box>\n                          <Box px={2}>\n                            <Icon mr={1} as={BsImages} />\n                            {group.pool_count}\n                          </Box>\n                          <Box px={2}>\n                            <Icon mr={1} as={BsFillChatDotsFill} />\n                            {group.topic_count}\n                          </Box>\n                        </Flex>\n                      </Box>\n                    </Flex>\n                  </Box>\n                </Link>\n              </WrapItem>\n            ))}\n          </Wrap>\n        </Container>\n      </>\n    );\n  }\n}\n\nexport default App;\n","/home/raghav/flickr-clone/src/searchComponent.js",[],"/home/raghav/flickr-clone/src/services/api.js",[],"/home/raghav/flickr-clone/src/gallery.js",["27"],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":8,"column":3,"nodeType":"34","messageId":"35","endLine":8,"endColumn":9},{"ruleId":"32","severity":1,"message":"36","line":1,"column":22,"nodeType":"34","messageId":"35","endLine":1,"endColumn":30},"no-native-reassign",["37"],"no-negated-in-lhs",["38"],"no-unused-vars","'Center' is defined but never used.","Identifier","unusedVar","'Skeleton' is defined but never used.","no-global-assign","no-unsafe-negation"]